{"version":3,"sources":["pages/home/ContactTable.js","api/index.js","pages/home/index.js","pages/app/App.js","reportWebVitals.js","index.js"],"names":["ContactTable","props","Table","responsive","size","hover","bordered","data","length","map","elm","idx","firstName","lastName","age","photo","src","alt","style","height","width","borderRadius","fontSize","Button","variant","onClick","handleEdit","handleDelete","handleDetail","id","colSpan","BASE_URL","initialValue","undefined","HomePage","React","useState","isShowModal","setShowModal","actionType","setActionType","contactData","setContactData","validated","setValidated","listContact","setListContact","useEffect","getContactAll","axios","get","then","res","console","log","handleOnChangeInput","e","value","target","onHide","Container","textAlign","backgroundColor","window","screen","padding","Swal","fire","title","text","icon","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","result","isConfirmed","delete","resp","message","catch","err","getContactById","Modal","show","centered","Header","Title","Body","Form","noValidate","onSubmit","event","form","currentTarget","payload","objectWithoutKey","object","key","checkValidity","preventDefault","stopPropagation","post","put","updateContact","Group","Row","Label","column","lg","Col","Control","required","type","placeholder","onChange","readOnly","Feedback","as","sm","span","offset","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0da73558.chunk.js","sourcesContent":["import React from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport { Table } from \"react-bootstrap\";\n\nfunction ContactTable(props) {\n  return (\n    <Table responsive=\"sm\" size=\"md\" hover bordered>\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th>Age</th>\n          <th>Avatar</th>\n          <th>Actions</th>\n        </tr>\n      </thead>\n      <tbody>\n        {props.data.length > 0 ? (\n          props.data.map((elm, idx) => {\n            return (\n              <tr key={idx}>\n                <td>{`${elm.firstName || \"\"} ${elm.lastName}`}</td>\n                <td>{elm.age}</td>\n                <td>\n                  {elm.photo !== \"N/A\" ? (\n                    <img\n                      src={elm.photo}\n                      alt=\"avatar\"\n                      style={{\n                        height: \"50px\",\n                        width: \"50px\",\n                        borderRadius: 100,\n                      }}\n                    />\n                  ) : (\n                    <p style={{fontSize: 20}}>No photo available</p>\n                  )}\n                </td>\n                <td>\n                  <Button\n                    variant=\"outline-primary\"\n                    onClick={() => {\n                      props.handleEdit(elm);\n                    }}\n                    size=\"sm\"\n                  >\n                    Edit\n                  </Button>{\" \"}\n                  <Button\n                    variant=\"outline-danger\"\n                    onClick={() => {\n                      props.handleDelete(elm);\n                    }}\n                    size=\"sm\"\n                  >\n                    Delete\n                  </Button>{\" \"}\n                  <Button\n                    variant=\"outline-info\"\n                    onClick={() => {\n                      props.handleDetail(elm.id);\n                    }}\n                    size=\"sm\"\n                  >\n                    Detail\n                  </Button>\n                </td>\n              </tr>\n            );\n          })\n        ) : (\n          <tr>\n            <td colSpan={4}>No contacts...</td>\n          </tr>\n        )}\n      </tbody>\n    </Table>\n  );\n}\n\nexport default ContactTable;\n","import axios from \"axios\";\n\nconst BASE_URL = \"https://simple-contact-crud.herokuapp.com\";\n\nexport const getContact = () => axios.get(`${BASE_URL}/contact`);\n\nexport const createContact = (payload) => axios.post(`${BASE_URL}/contact`, payload);\n\nexport const updateContact = (id,payload) => axios.put(`${BASE_URL}/contact/${id}`, payload);\n\nexport const deleteContact = (id) => axios.delete(`${BASE_URL}/contact/${id}`);\n\nexport const getContactById = (id) => axios.get(`${BASE_URL}/contact/${id}`);\n","import React from \"react\";\nimport ContactTable from \"./ContactTable\";\nimport Button from \"react-bootstrap/Button\";\nimport { Container, Col, Form, Modal, Row } from \"react-bootstrap\";\nimport {\n  createContact,\n  deleteContact,\n  getContact,\n  updateContact,\n  getContactById,\n} from \"../../api/index\";\nimport Swal from \"sweetalert2\";\n\nconst initialValue = {\n  age: undefined,\n  firstName: \"\",\n  id: \"\",\n  lastName: \"\",\n  photo: \"N/A\",\n};\n\nfunction HomePage() {\n  const [isShowModal, setShowModal] = React.useState(false);\n  const [actionType, setActionType] = React.useState(\"\");\n  const [contactData, setContactData] = React.useState(initialValue);\n  const [validated, setValidated] = React.useState(false);\n  const [listContact, setListContact] = React.useState([]);\n\n  React.useEffect(() => {\n    getContactAll();\n  }, []);\n\n  React.useEffect(() => {\n    setValidated(false);\n  }, [isShowModal]);\n\n  const getContactAll = () => {\n    getContact().then((res) => {\n      console.log(res.data.data);\n\n      setListContact(res.data.data);\n      setShowModal(false);\n    });\n  };\n\n  const handleEdit = (data) => {\n    console.log(data);\n\n    setContactData(data);\n    setActionType(\"Edit\");\n    setShowModal(true);\n  };\n\n  const handleAdd = () => {\n    setContactData(initialValue);\n    setActionType(\"Add\");\n    setShowModal(true);\n  };\n\n  const handleDetail = (id) => {\n    console.log(id);\n    setActionType(\"Detail\");\n\n    getContactById(id).then((res) => {\n      console.log(res.data.data);\n\n      setContactData(res.data.data);\n      setShowModal(true);\n    });\n  };\n\n  const handleDelete = (data) => {\n    setActionType(\"delete\");\n    Swal.fire({\n      title: \"Are you sure you want to delete this contact?\",\n      text: \"You won't be able to revert this!\",\n      icon: \"warning\",\n      showCancelButton: true,\n      confirmButtonColor: \"#3085d6\",\n      cancelButtonColor: \"#d33\",\n      confirmButtonText: \"Yes, delete it!\",\n    }).then((result) => {\n      if (result.isConfirmed) {\n        deleteContact(data.id)\n          .then((resp) => {\n            console.log(resp.data.message);\n            Swal.fire(\"\", resp.data.message, \"info\");\n            getContactAll();\n          })\n          .catch((err) => {\n            console.log(err);\n            Swal.fire(\"\", err.message, \"error\");\n            getContactAll();\n          });\n      }\n    });\n  };\n\n  const handleSubmit = (event) => {\n    const form = event.currentTarget;\n    console.log(form);\n    const objectWithoutKey = (object, key) => {\n      const { [key]: deletedKey, ...otherKeys } = object;\n      return otherKeys;\n    };\n\n    if (form.checkValidity() === false) {\n      setValidated(true);\n      event.preventDefault();\n      event.stopPropagation();\n    } else {\n      setValidated(true);\n      event.preventDefault();\n\n      if (actionType === \"Add\") {\n        createContact(objectWithoutKey(contactData, \"id\"))\n          .then((resp) => {\n            Swal.fire(\"Saved!\", \"Contact has been saved.\", \"info\");\n            getContactAll();\n          })\n          .catch((err) => {\n            Swal.fire(\"\", err.message, \"error\");\n            getContactAll();\n          });\n      } else {\n        updateContact(contactData.id, objectWithoutKey(contactData, \"id\"))\n          .then((resp) => {\n            if (resp.data.message === \"Contact edited\") {\n              Swal.fire(resp.data.message, \"\", \"info\");\n            }\n            getContactAll();\n          })\n          .catch((err) => {\n            Swal.fire(\"\", err.message, \"error\");\n            getContactAll();\n          });\n      }\n    }\n  };\n\n  const handleOnChangeInput = (e) => {\n    let { value } = e.target;\n\n    if (value !== \"\" && value !== null) {\n      setContactData({ ...contactData, [e.target.id]: value });\n    } else {\n      setContactData({ ...contactData, [e.target.id]: \"\" });\n    }\n  };\n\n  const onHide = () => {\n    setContactData(initialValue);\n    setShowModal(false);\n  };\n\n  return (\n    <Container>\n      <p style={{ textAlign: \"left\" }}>Contact List</p>\n      <Button variant=\"primary\" size=\"sm\" onClick={handleAdd}>\n        Add New\n      </Button>\n      <div\n        style={{\n          backgroundColor: \"white\",\n          width: window.screen.width - 200,\n          padding: 5,\n        }}\n      ></div>\n      <ContactTable\n        actionType={actionType}\n        data={listContact}\n        setActionType={setActionType}\n        handleEdit={handleEdit}\n        handleDelete={handleDelete}\n        handleDetail={handleDetail}\n      />\n\n      <Modal show={isShowModal} onHide={onHide} size=\"lg\" centered>\n        <Modal.Header>\n          <Modal.Title>\n            {actionType === \"Edit\" ? \"Edit Contact\" : \"Add New Contact\"}\n          </Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <Form noValidate validated={validated} onSubmit={handleSubmit}>\n            <Form.Group>\n              <Form.Row>\n                <Form.Label column=\"sm\" lg={2}>\n                  First Name\n                </Form.Label>\n                <Col>\n                  <Form.Control\n                    required\n                    size=\"sm\"\n                    type=\"text\"\n                    placeholder=\"Input first name\"\n                    id=\"firstName\"\n                    value={contactData.firstName}\n                    onChange={handleOnChangeInput}\n                    readOnly={actionType === \"Detail\"}\n                  />\n                  <Form.Control.Feedback type=\"invalid\">\n                    First name cannot be empty.\n                  </Form.Control.Feedback>\n                </Col>\n              </Form.Row>\n            </Form.Group>\n            <Form.Group>\n              <Form.Row>\n                <Form.Label column=\"sm\" lg={2}>\n                  LastName\n                </Form.Label>\n                <Col>\n                  <Form.Control\n                    required\n                    size=\"sm\"\n                    type=\"text\"\n                    placeholder=\"Input last name\"\n                    id=\"lastName\"\n                    value={contactData.lastName}\n                    onChange={handleOnChangeInput}\n                    readOnly={actionType === \"Detail\"}\n                  />\n                  <Form.Control.Feedback type=\"invalid\">\n                    Last name cannot be empty.\n                  </Form.Control.Feedback>\n                </Col>\n              </Form.Row>\n            </Form.Group>\n            <Form.Group>\n              <Form.Row>\n                <Form.Label column=\"sm\" lg={2}>\n                  Age\n                </Form.Label>\n                <Col>\n                  <Form.Control\n                    required\n                    size=\"sm\"\n                    type=\"number\"\n                    placeholder=\"Input age\"\n                    id=\"age\"\n                    value={contactData.age}\n                    onChange={handleOnChangeInput}\n                    readOnly={actionType === \"Detail\"}\n                  />\n                  <Form.Control.Feedback type=\"invalid\">\n                    Age cannot be empty.\n                  </Form.Control.Feedback>\n                </Col>\n              </Form.Row>\n            </Form.Group>\n\n            {actionType !== \"Detail\" ? (\n              <Form.Group>\n                <Form.Row>\n                  <Form.Label column=\"sm\" lg={2}>\n                    Photo\n                  </Form.Label>\n                  <Col>\n                    <Form.Control\n                      size=\"sm\"\n                      type=\"string\"\n                      placeholder=\"Input link photo\"\n                      id=\"photo\"\n                      value={contactData.photo}\n                      onChange={handleOnChangeInput}\n                      readOnly={actionType === \"Detail\"}\n                    />\n                  </Col>\n                </Form.Row>\n              </Form.Group>\n            ) : (\n              <Form.Group>\n                <Form.Row>\n                  <Form.Label column=\"sm\" lg={2}>\n                    Preview Photo\n                  </Form.Label>\n                  <Col>\n                    {contactData.photo !== \"N/A\" ? (\n                      <img\n                        src={contactData.photo}\n                        alt=\"avatar\"\n                        style={{\n                          height: \"50px\",\n                          width: \"50px\",\n                          borderRadius: 100,\n                        }}\n                      />\n                    ) : (\n                      <p>No photo available</p>\n                    )}\n                  </Col>\n                </Form.Row>\n              </Form.Group>\n            )}\n\n            <Form.Group as={Row}>\n              <Col sm={{ span: 10, offset: 2 }}>\n                <Button\n                  variant=\"secondary\"\n                  size=\"sm\"\n                  onClick={() => {\n                    setValidated(false);\n                    onHide();\n                  }}\n                >\n                  Close\n                </Button>\n                {\"  \"}\n                {actionType !== \"Detail\" && (\n                  <Button variant=\"primary\" size=\"sm\" type=\"submit\">\n                    {actionType === \"Edit\" ? \"Edit Contact\" : \"Add New Contact\"}\n                  </Button>\n                )}\n              </Col>\n            </Form.Group>\n          </Form>\n        </Modal.Body>\n      </Modal>\n    </Container>\n  );\n}\n\nexport default HomePage;\n","import './App.css';\nimport HomePage from '../home';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nfunction App() {\n  return (\n    <div>\n      <header className=\"App-header\">\n        <HomePage />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './pages/app/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}